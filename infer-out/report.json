[{"bug_type":"THREAD_SAFETY_VIOLATION_2","qualifier":"Unprotected write. Non-private method `WrongLock.A()` writes to field `this.data.value` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":26,"column":-1,"procedure":"locks.WrongLock.A():void","procedure_start_line":0,"file":"src/main/java/locks/WrongLock.java","bug_trace":[{"level":0,"filename":"src/main/java/locks/WrongLock.java","line_number":26,"column_number":-1,"description":"access to `this.data.value`"}],"key":"WrongLock.java|A|THREAD_SAFETY_VIOLATION_2","hash":"d01edeca362d531fba0f829231864439","bug_type_hum":"Thread Safety Violation 2","access":"hJWmvgAAACsAAAAEAAAAEwAAAA+gsFoA/5IJInNyYy9tYWluL2phdmEvbG9ja3MvV3JvbmdMb2NrLmphdmFA","snapshot1":"7d0f756784710bfb45524c26b05038f9"},{"bug_type":"THREAD_SAFETY_VIOLATION_2","qualifier":"Read/Write race. Non-private method `WrongLock.A()` reads without synchronization from `this.data.value`. Potentially races with write in method `WrongLock.B()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":28,"column":-1,"procedure":"locks.WrongLock.A():void","procedure_start_line":0,"file":"src/main/java/locks/WrongLock.java","bug_trace":[{"level":0,"filename":"src/main/java/locks/WrongLock.java","line_number":28,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/locks/WrongLock.java","line_number":28,"column_number":-1,"description":"access to `this.data.value`"},{"level":0,"filename":"src/main/java/locks/WrongLock.java","line_number":35,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/locks/WrongLock.java","line_number":35,"column_number":-1,"description":"access to `this.data.value`"}],"key":"WrongLock.java|A|THREAD_SAFETY_VIOLATION_2","hash":"35ab57802ae92205113e19471780160d","bug_type_hum":"Thread Safety Violation 2","access":"hJWmvgAAAFUAAAAIAAAAJgAAAB6gsFwA/5IJInNyYy9tYWluL2phdmEvbG9ja3MvV3JvbmdMb2NrLmphdmGgsGMA/5IJInNyYy9tYWluL2phdmEvbG9ja3MvV3JvbmdMb2NrLmphdmFA","snapshot1":"fc17a30991c1a79f1e6890009bacdbce","snapshot2":"2faefcaa69a49e3c0dce2e0aa255c3e0"},{"bug_type":"THREAD_SAFETY_VIOLATION_2","qualifier":"Unprotected write. Non-private method `WrongLock.B()` writes to field `this.data.value` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":35,"column":-1,"procedure":"locks.WrongLock.B():void","procedure_start_line":0,"file":"src/main/java/locks/WrongLock.java","bug_trace":[{"level":0,"filename":"src/main/java/locks/WrongLock.java","line_number":35,"column_number":-1,"description":"access to `this.data.value`"}],"key":"WrongLock.java|B|THREAD_SAFETY_VIOLATION_2","hash":"272bfcb042741a0d41611d026d7acd03","bug_type_hum":"Thread Safety Violation 2","access":"hJWmvgAAACsAAAAEAAAAEwAAAA+gsGMA/5IJInNyYy9tYWluL2phdmEvbG9ja3MvV3JvbmdMb2NrLmphdmFA","snapshot1":"2faefcaa69a49e3c0dce2e0aa255c3e0"},{"bug_type":"THREAD_SAFETY_VIOLATION_2","qualifier":"Read/Write race. Non-private method `Main.main(...)` reads without synchronization from `wronglock2.Main.s`. Potentially races with write in method `Main.run()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":23,"column":-1,"procedure":"wronglock2.Main.main(java.lang.String[]):void","procedure_start_line":0,"file":"src/main/java/wronglock2/Main.java","bug_trace":[{"level":0,"filename":"src/main/java/wronglock2/Main.java","line_number":23,"column_number":-1,"description":"<Read trace>"},{"level":0,"filename":"src/main/java/wronglock2/Main.java","line_number":23,"column_number":-1,"description":"access to `wronglock2.Main.s`"},{"level":0,"filename":"src/main/java/wronglock2/Main.java","line_number":31,"column_number":-1,"description":"<Write trace>"},{"level":0,"filename":"src/main/java/wronglock2/Main.java","line_number":31,"column_number":-1,"description":"access to `wronglock2.Main.s`"}],"key":"Main.java|main|THREAD_SAFETY_VIOLATION_2","hash":"7b434d37f87a0755ccef061c709c8224","bug_type_hum":"Thread Safety Violation 2","access":"hJWmvgAAAFUAAAAIAAAAJgAAAB6gsFcA/5IJInNyYy9tYWluL2phdmEvd3Jvbmdsb2NrMi9NYWluLmphdmGgsF8A/5IJInNyYy9tYWluL2phdmEvd3Jvbmdsb2NrMi9NYWluLmphdmFA","snapshot1":"771ae0901a17a92c1230b0ef52ac5925","snapshot2":"d6b4c4d0b5a5d34100d1a1df36b4079c"},{"bug_type":"THREAD_SAFETY_VIOLATION_2","qualifier":"Unprotected write. Non-private method `Main.run()` writes to field `wronglock2.Main.s` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","line":31,"column":-1,"procedure":"wronglock2.Main.run():void","procedure_start_line":0,"file":"src/main/java/wronglock2/Main.java","bug_trace":[{"level":0,"filename":"src/main/java/wronglock2/Main.java","line_number":31,"column_number":-1,"description":"access to `wronglock2.Main.s`"}],"key":"Main.java|run|THREAD_SAFETY_VIOLATION_2","hash":"122993afed2e859c80deedd5ffe0df88","bug_type_hum":"Thread Safety Violation 2","access":"hJWmvgAAACsAAAAEAAAAEwAAAA+gsF8A/5IJInNyYy9tYWluL2phdmEvd3Jvbmdsb2NrMi9NYWluLmphdmFA","snapshot1":"d6b4c4d0b5a5d34100d1a1df36b4079c"}]
