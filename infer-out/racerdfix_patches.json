[{"access":"hJWmvgAAACsAAAAEAAAAEwAAAA+gsFoA/5IJInNyYy9tYWluL2phdmEvbG9ja3MvV3JvbmdMb2NrLmphdmFA","bug_trace":[{"column_number":-1,"description":"access to `this.data.value`","filename":"src/main/java/locks/WrongLock.java","level":0,"line_number":26}],"bug_type":"THREAD_SAFETY_VIOLATION_2","bug_type_hum":"Thread Safety Violation 2","column":-1,"file":"src/main/java/locks/WrongLock.java","hash":"d01edeca362d531fba0f829231864439","key":"WrongLock.java|A|THREAD_SAFETY_VIOLATION_2","line":26,"patch_choice":5,"patches":{"patch_options":[{"patch":[{"description":"Replace (INSERT) lines: 14 - 37\n+:  Object objR4 =  new Object(); ","kind":"InsAfter","partial_patch":" Object objR4 =  new Object(); ","start":16,"stop":16}],"patch_id":"5"}]},"procedure":"locks.WrongLock.A():void","procedure_start_line":0,"qualifier":"Unprotected write. Non-private method `WrongLock.A()` writes to field `this.data.value` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","snapshot1":"7d0f756784710bfb45524c26b05038f9","snapshot2":""},{"access":"hJWmvgAAAFUAAAAIAAAAJgAAAB6gsFwA/5IJInNyYy9tYWluL2phdmEvbG9ja3MvV3JvbmdMb2NrLmphdmGgsGMA/5IJInNyYy9tYWluL2phdmEvbG9ja3MvV3JvbmdMb2NrLmphdmFA","bug_trace":[{"column_number":-1,"description":"<Read trace>","filename":"src/main/java/locks/WrongLock.java","level":0,"line_number":28},{"column_number":-1,"description":"access to `this.data.value`","filename":"src/main/java/locks/WrongLock.java","level":0,"line_number":28},{"column_number":-1,"description":"<Write trace>","filename":"src/main/java/locks/WrongLock.java","level":0,"line_number":35},{"column_number":-1,"description":"access to `this.data.value`","filename":"src/main/java/locks/WrongLock.java","level":0,"line_number":35}],"bug_type":"THREAD_SAFETY_VIOLATION_2","bug_type_hum":"Thread Safety Violation 2","column":-1,"file":"src/main/java/locks/WrongLock.java","hash":"35ab57802ae92205113e19471780160d","key":"WrongLock.java|A|THREAD_SAFETY_VIOLATION_2","line":28,"patch_choice":-1,"patches":{"patch_options":[]},"procedure":"locks.WrongLock.A():void","procedure_start_line":0,"qualifier":"Read/Write race. Non-private method `WrongLock.A()` reads without synchronization from `this.data.value`. Potentially races with write in method `WrongLock.B()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","snapshot1":"fc17a30991c1a79f1e6890009bacdbce","snapshot2":"2faefcaa69a49e3c0dce2e0aa255c3e0"},{"access":"hJWmvgAAACsAAAAEAAAAEwAAAA+gsGMA/5IJInNyYy9tYWluL2phdmEvbG9ja3MvV3JvbmdMb2NrLmphdmFA","bug_trace":[{"column_number":-1,"description":"access to `this.data.value`","filename":"src/main/java/locks/WrongLock.java","level":0,"line_number":35}],"bug_type":"THREAD_SAFETY_VIOLATION_2","bug_type_hum":"Thread Safety Violation 2","column":-1,"file":"src/main/java/locks/WrongLock.java","hash":"272bfcb042741a0d41611d026d7acd03","key":"WrongLock.java|B|THREAD_SAFETY_VIOLATION_2","line":35,"patch_choice":-1,"patches":{"patch_options":[]},"procedure":"locks.WrongLock.B():void","procedure_start_line":0,"qualifier":"Unprotected write. Non-private method `WrongLock.B()` writes to field `this.data.value` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","snapshot1":"2faefcaa69a49e3c0dce2e0aa255c3e0","snapshot2":""},{"access":"hJWmvgAAAFUAAAAIAAAAJgAAAB6gsFcA/5IJInNyYy9tYWluL2phdmEvd3Jvbmdsb2NrMi9NYWluLmphdmGgsF8A/5IJInNyYy9tYWluL2phdmEvd3Jvbmdsb2NrMi9NYWluLmphdmFA","bug_trace":[{"column_number":-1,"description":"<Read trace>","filename":"src/main/java/wronglock2/Main.java","level":0,"line_number":23},{"column_number":-1,"description":"access to `wronglock2.Main.s`","filename":"src/main/java/wronglock2/Main.java","level":0,"line_number":23},{"column_number":-1,"description":"<Write trace>","filename":"src/main/java/wronglock2/Main.java","level":0,"line_number":31},{"column_number":-1,"description":"access to `wronglock2.Main.s`","filename":"src/main/java/wronglock2/Main.java","level":0,"line_number":31}],"bug_type":"THREAD_SAFETY_VIOLATION_2","bug_type_hum":"Thread Safety Violation 2","column":-1,"file":"src/main/java/wronglock2/Main.java","hash":"7b434d37f87a0755ccef061c709c8224","key":"Main.java|main|THREAD_SAFETY_VIOLATION_2","line":23,"patch_choice":2,"patches":{"patch_options":[{"patch":[{"description":"Replace (INSERT) lines: 5 - 52\n+:  static Object objR1 =  new Object(); ","kind":"InsAfter","partial_patch":" static Object objR1 =  new Object(); ","start":7,"stop":7},{"description":"Replace (INSERT) lines: 23 - 25\n-: if (s.getCount() != THREADS) { \n             throw new Exception(\"bug found.\"); \n         }\n+: synchronized(objR1) { if (s.getCount() != THREADS) { \n             throw new Exception(\"bug found.\"); \n         } }  \n     ","kind":"Replace","partial_patch":"synchronized(objR1) { if (s.getCount() != THREADS) { \n             throw new Exception(\"bug found.\"); \n         } }  \n     ","start":24,"stop":26},{"description":"Replace (INSERT) lines: 31 - 31\n-: s = new Struct(s.getNumber() * 2, s.getCount() + 1);\n+: synchronized(objR1) { s = new Struct(s.getNumber() * 2, s.getCount() + 1); }  \n  \n     ","kind":"Replace","partial_patch":"synchronized(objR1) { s = new Struct(s.getNumber() * 2, s.getCount() + 1); }  \n  \n     ","start":32,"stop":32}],"patch_id":"2"},{"patch":[{"description":"Replace (UPDATE) lines: 8 - 8\n-: public static Struct s = new Struct(1, 0);\n+: public static volatile Struct s = new Struct(1, 0); ","kind":"Replace","partial_patch":"public static volatile Struct s = new Struct(1, 0); ","start":9,"stop":9}],"patch_id":"3"}]},"procedure":"wronglock2.Main.main(java.lang.String[]):void","procedure_start_line":0,"qualifier":"Read/Write race. Non-private method `Main.main(...)` reads without synchronization from `wronglock2.Main.s`. Potentially races with write in method `Main.run()`.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","snapshot1":"771ae0901a17a92c1230b0ef52ac5925","snapshot2":"d6b4c4d0b5a5d34100d1a1df36b4079c"},{"access":"hJWmvgAAACsAAAAEAAAAEwAAAA+gsF8A/5IJInNyYy9tYWluL2phdmEvd3Jvbmdsb2NrMi9NYWluLmphdmFA","bug_trace":[{"column_number":-1,"description":"access to `wronglock2.Main.s`","filename":"src/main/java/wronglock2/Main.java","level":0,"line_number":31}],"bug_type":"THREAD_SAFETY_VIOLATION_2","bug_type_hum":"Thread Safety Violation 2","column":-1,"file":"src/main/java/wronglock2/Main.java","hash":"122993afed2e859c80deedd5ffe0df88","key":"Main.java|run|THREAD_SAFETY_VIOLATION_2","line":31,"patch_choice":-1,"patches":{"patch_options":[]},"procedure":"wronglock2.Main.run():void","procedure_start_line":0,"qualifier":"Unprotected write. Non-private method `Main.run()` writes to field `wronglock2.Main.s` outside of synchronization.\n Reporting because the current class is annotated `@ThreadSafe`, so we assume that this method can run in parallel with other non-private methods in the class (including itself).","severity":"WARNING","snapshot1":"d6b4c4d0b5a5d34100d1a1df36b4079c","snapshot2":""}]